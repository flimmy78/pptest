#ifndef __BD_COMM_ISP_H__
#define __BD_COMM_ISP_H__

#include "bd_type.h"
#include "bd_errno.h"
#include "bd_common.h"
#include "bd_debug.h"

#ifdef __cplusplus
#if __cplusplus
extern "C"{
#endif
#endif /* End of #ifdef __cplusplus */


/****************************************************************************
 * MACRO DEFINITION                                                         *
 ****************************************************************************/

#define WEIGHT_ZONE_ROW			15
#define WEIGHT_ZONE_COLUMN		17

#define LUT_FACTOR (8)
#define GAMMA_FE_LUT_SIZE ((1<<LUT_FACTOR)+1)
#define GAMMA_NODE_NUMBER  257

#define ISP_REG_BASE		0x205A0000
#define ISP_REG_SIZE		0x7fff

#define ISP_WINDOW0_START	0x205A010C
#define ISP_WINDOW0_SIZE	0x205A0110
#define ISP_WINDOW2_START	0x205A0120
#define ISP_WINDOW2_SIZE	0x205A0124

#define ISP_BYPASS_BASE		0x205A0040
 

/****************************************************************************
 * GENERAL STRUCTURES                                                       *
 ****************************************************************************/

typedef enum bdISP_ERR_CODE_E
{
    ERR_ISP_NOT_INIT				= 0x40,
    ERR_ISP_TM_NOT_CFG				= 0x41,
    ERR_ISP_ATTR_NOT_CFG			= 0x42,
    ERR_ISP_SNS_UNREGISTER			= 0x43,
    ERR_ISP_INVALID_ADDR			= 0x44,
    ERR_ISP_INVALID_ACCESS			= 0x45,
    ERR_ISP_WAIT_TIMEOUT			= 0x46,
    
} ISP_ERR_CODE_E;


#define BD_ERR_ISP_NULL_PTR							BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, EN_ERR_NULL_PTR)
#define BD_ERR_ISP_ILLEGAL_PARAM         			BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, EN_ERR_ILLEGAL_PARAM)

#define BD_ERR_ISP_NOT_INIT         				BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, ERR_ISP_NOT_INIT)
#define BD_ERR_ISP_TM_NOT_CFG         				BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, ERR_ISP_TM_NOT_CFG)
#define BD_ERR_ISP_ATTR_NOT_CFG         			BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, ERR_ISP_ATTR_NOT_CFG)
#define BD_ERR_ISP_SNS_UNREGISTER  	       			BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, ERR_ISP_SNS_UNREGISTER)
#define BD_ERR_ISP_INVALID_ADDR	   		   			BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, ERR_ISP_INVALID_ADDR)
#define BD_ERR_ISP_INVALID_ACCESS  		   			BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, ERR_ISP_INVALID_ACCESS)
#define BD_ERR_ISP_WAIT_TIMEOUT  		   			BD_DEF_ERR(BD_ID_ISP, EN_ERR_LEVEL_ERROR, ERR_ISP_WAIT_TIMEOUT)


typedef enum bdISP_BAYER_FORMAT_E
{
	BAYER_RGGB	= 0,
	BAYER_GRBG	= 1,
	BAYER_GBRG	= 2,
	BAYER_BGGR	= 3,
	BAYER_BUTT	
    
} ISP_BAYER_FORMAT_E;

typedef enum bdISP_OP_TYPE_E
{
	OP_TYPE_AUTO	= 0,
	OP_TYPE_MANUAL	= 1,
	OP_TYPE_BUTT
    
} ISP_OP_TYPE_E;

typedef enum bdISP_AE_MODE_E
{
    AE_MODE_LOW_NOISE		= 0,
    AE_MODE_FRAME_RATE		= 1,
    AE_MODE_BUTT
    
} ISP_AE_MODE_E;

typedef enum bdISP_WB_MODE_E
{
    /* all auto*/
    WB_AUTO = 0,
    
    /* half auto */		
    WB_FLUORESCENT,		/*fluorescent*/
    WB_LAMP,				/*lamp*/
    WB_DAYLIGHT,			/*daylight*/
    WB_FLASH,				/*flash light*/
    WB_CLOUDY,				/*cloudy*/
    WB_SHADOW,				/*shadow*/
    WB_BUTT
    
} ISP_WB_MODE_E;

typedef struct bdISP_WINDOW_S
{
	BD_U16 u16Start;
	BD_U16 u16Length;
    
} ISP_WINDOW_S;

typedef enum bdISP_WIND_MODE_E
{
	ISP_WIND_NONE		= 0,
	ISP_WIND_HOR		= 1,
	ISP_WIND_VER		= 2,
	ISP_WIND_ALL		= 3,
	ISP_WIND_BUTT
    
} ISP_WIND_MODE_E;

typedef enum bdISP_IRIS_STATUS_E
{
	ISP_IRIS_KEEP  = 0,       /* Do nothing to Iris */
	ISP_IRIS_OPEN  = 1,       /* Open Iris to the max */
	ISP_IRIS_CLOSE = 2,       /* Close Iris to the min */
	ISP_IRIS_BUTT

} ISP_IRIS_STATUS_E;

typedef enum bdISP_TRIGGER_STATUS_E
{
	ISP_TRIGGER_INIT     = 0,  /* Initial status, before trigger */
	ISP_TRIGGER_SUCCESS  = 1,  /* Trigger finished successfully */
	ISP_TRIGGER_TIMEOUT  = 2,  /* Trigger finished because of time out */
	ISP_TRIGGER_BUTT

} ISP_TRIGGER_STATUS_E;

typedef struct bdISP_INPUT_TIMING_S
{
	ISP_WIND_MODE_E enWndMode;
	BD_U16 u16HorWndStart;    /*RW, Range: [0x0, 0x780]*/
	BD_U16 u16HorWndLength;   /*RW, Range: [0x0, 0x780]*/
	BD_U16 u16VerWndStart;    /*RW, Range: [0x0, 0x4B0]*/
	BD_U16 u16VerWndLength;   /*RW, Range: [0x0, 0x4B0]*/
    
} ISP_INPUT_TIMING_S;

typedef struct bdISP_INPUT_POLARITY_S
{
	BD_U32 u32PixelClk;
	BD_U32 u32HSyncClk;
	BD_U32 u32VSyncClk;
} ISP_INPUT_POLARITY_S;

typedef struct bdISP_IMAGE_ATTR_S		// sensor information: list?
{
	BD_U16 u16Width;   /*RW, Range: [0x0, 0x780]*/
	BD_U16 u16Height;  /*RW, Range: [0x0, 0x4B0]*/
	BD_U16 u16FrameRate;	/*RW, Range: [0x0, 0xFF]*/		
	ISP_BAYER_FORMAT_E  enBayer;
    
} ISP_IMAGE_ATTR_S;

#if 0
typedef enum bdISP_MOD_BYPASS_E
{
	ISP_MOD_SHARPEN		= 0x8000,
	ISP_MOD_GAMMARGB	= 0x4000,
	ISP_MOD_COLORMATRIX	= 0x2000,
	ISP_MOD_DEMOSAIC	= 0x1000,

	ISP_MOD_GAMMAPOST	= 0x0800,
	ISP_MOD_GAMMAPRE	= 0x0200,
	ISP_MOD_SHADING		= 0x0100,

	ISP_MOD_IRIDIX		= 0x0080,
	ISP_MOD_GAIN		= 0x0040,
	ISP_MOD_SINTER		= 0x0008,
	ISP_MOD_HOTPIXEL	= 0x0004,
	ISP_MOD_GAMMAFE		= 0x0002,	
	ISP_MOD_BALANCEFE	= 0x0001,		
	ISP_MOD_BUTT
    
} ISP_MOD_BYPASS_E;


typedef enum bdISP_AE_FRAME_END_UPDATE_E
{
        ISP_AE_FRAME_END_UPDATE_0  = 0x0, //isp update gain and exposure  in the  same frame
        ISP_AE_FRAME_END_UPDATE_1  = 0x1, //isp update exposure one frame before  gain
       
        ISP_AE_FRAME_END_BUTT

}ISP_AE_FRAME_END_UPDATE_E;
/* 4A settings                                                              */
typedef struct bdISP_AE_ATTR_S
{
    /* base parameter */
    ISP_AE_MODE_E enAEMode;		/*AE mode(lownoise/framerate)(onvif)*/
    BD_U16 u16ExpTimeMax;       /*RW, the exposure time's max and min value .(unit :line),Range:[0, 0xFFFF], it's related to specific sensor, usually the range max value is 1125  for 1080p sensor,and 750 for 720p sensor*/
    BD_U16 u16ExpTimeMin;       /*RW, Range: [0, u16ExpTimeMax]*/
    BD_U16 u16DGainMax;         /*RW,  the Dgain's  max value, Range : [0x1, 0xFF],it's related to specific sensor*/
    BD_U16 u16DGainMin;         /*RW, Range: [0x1, u16DainMax]*/
    BD_U16 u16AGainMax;			/*RW,  the Again's  max value, Range : [0x1, 0xFF],it's related to specific sensor*/
    BD_U16 u16AGainMin;         /*RW, Range: [0x1, u16AainMax]*/
    
    BD_U8  u8ExpStep;			/*RW, AE adjust step, Range: [0x0, 0xFF]*/
    BD_S16 s16ExpTolerance;		/*RW, AE adjust tolerance, Range: [0x0, 0xFF]*/
    BD_U8  u8ExpCompensation;	/*RW, AE compensation, Range: [0x0, 0xFF]*/ 
    ISP_AE_FRAME_END_UPDATE_E  enFrameEndUpdateMode;
    BD_BOOL bByPassAE;
    /*AE weighting table*/
    BD_U8 u8Weight[WEIGHT_ZONE_ROW][WEIGHT_ZONE_COLUMN]; /*Range :  [0, 0xF]*/
    
} ISP_AE_ATTR_S;

typedef struct bdISP_EXP_STA_INFO_S
{
    BD_U8  u8ExpHistThresh[4];				/*RW, Histogram threshold for bin 0/1 1/2 2/3 3/4 boundary, Range: [0x0, 0xFF]*/
    BD_U16 u16ExpStatistic[WEIGHT_ZONE_ROW ][WEIGHT_ZONE_COLUMN][5];	/*RO, zone exposure statistics,Range: [0x0, 0xFFFF]*/
    BD_U16 u16Exp_Hist256Value[256];		/*RO, 256 bins histogram,Range: [0x0, 0xFFFF]*/
    BD_U16 u16Exp_Hist5Value[5];			/*RO, 5 bins histogram, Range: [0x0, 0xFFFF]*/
    BD_U8   u8AveLum;						/*RO, average lum,Range: [0x0, 0xFF]*/


}ISP_EXP_STA_INFO_S;

typedef struct bdISP_ME_ATTR_S
{
	BD_S32 s32AGain;       		/*RW,  sensor analog gain (unit: times), Range: [0x0, 0xFF],it's related to the specific sensor */
	BD_S32 s32DGain;       		/*RW,  sensor digital gain (unit: times), Range: [0x0, 0xFF],it's related to the specific sensor */
	BD_U32 u32ExpLine;			/*RW,  sensor exposure time (unit: line ), Range: [0x0, 0xFFFF],it's related to the specific sensor */

	BD_BOOL bManualExpLineEnable;
	BD_BOOL bManualAGainEnable;
	BD_BOOL bManualDGainEnable;

} ISP_ME_ATTR_S;

typedef struct bdISP_AF_ATTR_S
{
    BD_S32 s32FocusDistanceMax;		/* the focuse range*/
    BD_S32 s32FocusDistanceMin;

    /*weighting table*/
    BD_U8 u8Weight[WEIGHT_ZONE_ROW][WEIGHT_ZONE_COLUMN];
    
} ISP_AF_ATTR_S;

typedef struct bdISP_FOUCS_STA_INFO_S
{
	BD_U16 u16FocusMetrics;      /*RO, The integrated and normalized measure of contrast*/
	BD_U16 u16ThresholdRead;     /*RO, The ISP recommend value of AF threshold*/
	BD_U16 u16ThresholdWrite;    /*RW, The user defined value of AF threshold (or 0 to use threshold from previous frame)*/
	BD_U16 u16FocusIntensity;    /*RO, The average brightness*/
	BD_U16 u16ZoneMetrics[WEIGHT_ZONE_ROW][WEIGHT_ZONE_COLUMN]; /*RO, The zoned measure of contrast*/
    
} ISP_FOCUS_STA_INFO_S;

typedef struct bdISP_MF_ATTR_S
{
    BD_S32 s32DefaultSpeed;		/*1,default speed(unit:m/s).(onvif)*/		
    
} ISP_MF_ATTR_S;

typedef struct bdISP_AWB_ATTR_S
{
    BD_U8 u8RGStrength;        /*RW, Range: [0x0, 0xFF]*/
    BD_U8 u8BGStrength;        /*RW, Range: [0x0, 0xFF]*/
    BD_U8 u8ZoneSel;           /*RW,  A value of 0 or 0x3F means global AWB, A value between 0 and 0x3F means zoned AWB */
    BD_U8 u8HighColorTemp;     /*RW, AWB max temperature in K/100, Range: [0x0, 0xFF], Recommended: [85, 100] */
    BD_U8 u8LowColorTemp;      /*RW, AWB min temperature in K/100, Range: [0x0, u8HighColorTemp), Recommended: [20, 25] */
    /* weighting table*/
    BD_U8 u8Weight[WEIGHT_ZONE_ROW][WEIGHT_ZONE_COLUMN];  /*RW, Range :  [0, 0xF]*/
    
} ISP_AWB_ATTR_S;

typedef struct bdISP_WB_ZONE_STA_INFO_S
{
    BD_U16 u16Rg;         /*RO, Zoned WB output G/R, Range : [0x0, 0xFFF]*/
    BD_U16 u16Bg;         /*RO, Zoned WB output G/B, Range : [0x0, 0xFFF]*/
    BD_U32 u32Sum;        /*RO, Zoned WB output population,Range: [0x0, 0xFFFFFFFF]*/
  
} ISP_WB_ZONE_STA_INFO_S;

typedef struct bdISP_WB_STA_INFO_S
{
    BD_U16 u16WhiteLevel;  /*RW, Upper limit of valid data for white region, Range: [0x0, 0xFFFF]*/
    BD_U16 u16BlackLevel;  /*RW, Lower limit of valid data for white region, Range: [0x0, u16WhiteLevel)*/
    BD_U16 u16CbMax;       /*RW, Maximum value of B/G for white region, Range: [0x0,0xFFF]*/
    BD_U16 u16CbMin;       /*RW, Minimum value of B/G for white region, Range: [0x0, u16CbMax)*/
    BD_U16 u16CrMax;       /*RW, Maximum value of R/G for white region, Range: [0x0, 0xFFF]*/
    BD_U16 u16CrMin;       /*RW, Minimum value of R/G for white region, Range: [0x0, u16CrMax)*/
    
    BD_U16 u16GRgain;      /*RO, Global WB output G/R, Range: [0x0, 0xFFFF]*/
    BD_U16 u16GBgain;      /*RO, Global WB output G/B, Range: [0x0, 0xFFFF]*/
    BD_U32 u32GSum;        /*RO, Global WB output population, Range: [0x0, 0xFFFF]*/
 
    ISP_WB_ZONE_STA_INFO_S stZoneSta[WEIGHT_ZONE_ROW][WEIGHT_ZONE_COLUMN];  /*RO, Zoned WB statistics*/
  
} ISP_WB_STA_INFO_S;

typedef struct bdISP_MWB_ATTR_S		
{
    BD_U16 u16Rgain;      /*RW, Multiplier for R color channel, Range: [0x0, 0xFFFF]*/
	BD_U16 u16Ggain;      /*RW, Multiplier for G color channel, Range: [0x0, 0xFFFF]*/
    BD_U16 u16Bgain;      /*RW, Multiplier for B color channel, Range: [0x0, 0xFFFF]*/
    
} ISP_MWB_ATTR_S;

typedef struct bdISP_COLORMATRIX_S
{   BD_U16 u16HighColorTemp; /*RW,  Range: [2000,  8000]*/
    BD_U16 au16HighCCM[9];  /*RW,  Range: [0x0,  0xFFFF]*/
    BD_U16 u16MidColorTemp; /*RW,  the MidColorTemp should be at least 400 smaller than HighColorTemp, Range: [2000,  u16HighColorTemp-400]*/
    BD_U16 au16MidCCM[9];   /*RW,  Range: [0x0,  0xFFFF]*/
    BD_U16 u16LowColorTemp;  /*RW,  the LowColorTemp should be at least 400 smaller than HighColorTemp, Range: [2000,  u16MidColorTemp-400]*/
    BD_U16 au16LowCCM[9];  /*RW,  Range: [0x0,  0xFFFF]*/
} ISP_COLORMATRIX_S;

typedef struct bdISP_AI_ATTR_S
{
	BD_BOOL bIrisEnable;			/*Auto iris  on/off*/
	BD_BOOL bIrisCalEnable;			/*iris calibration on/off*/
	BD_U32  u32IrisHoldValue;       /*RW, iris hold value, Range: [0x0, 0x3E8]*/

	ISP_IRIS_STATUS_E enIrisStatus;         /*RW, status of Iris*/
	ISP_TRIGGER_STATUS_E enTriggerStatus;   /*RW, status of trigger*/
	BD_U16 u16IrisStopValue;                /*RW, the initial stop value for AI trigger, Range: [0x0,0x3E8]*/
	BD_U16 u16IrisCloseDrive;               /*RW, the drive value to close Iris, [700, 900]. A larger value means faster.*/
	BD_U16 u16IrisTriggerTime;              /*RW, frame numbers of AI trigger lasting time. > 600, [0x0, 0xFFF]*/
    BD_U8  u8IrisInertiaValue;              /*RW, frame numbers of  AI moment of inertia, Range: [0x0, 0xFF],the recommended value is between[0x3, 0xa]*/
    
} ISP_AI_ATTR_S;

typedef struct bdISP_MI_ATTR_S
{
    BD_S32 s32FixAttenuation;		
    
} ISP_MI_ATTR_S;


typedef struct bdISP_DRC_ATTR_S
{
    BD_BOOL bDRCEnable;        
    BD_BOOL bDRCManualEnable;        
    BD_U32  u32StrengthTarget;  /*RW,  Range: [0, 0xFF]. It is not the final strength used by ISP. 
                                         * It will be clipped to reasonable value when image is noisy. */
    BD_U32  u32SlopeMax;        /*RW,  Range: [0, 0xFF]. Not recommended to change. */
    BD_U32  u32SlopeMin;        /*RW,  Range: [0, 0xFF]. Not recommended to change. */
    BD_U32  u32WhiteLevel;      /*RW,  Range: [0, 0xFFFF]. Not recommended to change. */
    BD_U32  u32BlackLevel;      /*RW,  Range: [0, 0xFFF]. Not recommended to change. */
} ISP_DRC_ATTR_S;

typedef struct bdISP_ANTIFLICKER_S
{
	BD_BOOL bEnable;
	BD_U8 u8Frequency;  /*RW, Range: usually this value is 50 or 60  which is the frequency of the AC power supply*/
    
} ISP_ANTIFLICKER_S;

typedef struct bdISP_DP_ATTR_S
{
	BD_BOOL bEnableStatic;
	BD_BOOL bEnableDynamic;
	BD_BOOL bEnableDetect;
	ISP_TRIGGER_STATUS_E enTriggerStatus;  /*status of bad pixel trigger*/
	BD_U8   u8BadPixelStartThresh;         /*RW,  Range: [0, 0xFF] */
	BD_U8   u8BadPixelFinishThresh;        /*RW,  Range: [0, 0xFF] */
	BD_U16  u16BadPixelCountMax;           /*RW, limit of max number of bad pixel,  Range: [0, 0x3FF] */
	BD_U16  u16BadPixelCountMin;            /*RW, limit of min number of bad pixel, Range: [0, 0x3FF]*/
	BD_U16  u16BadPixelCount;               /*RW, limit of min number of bad pixel, Range: [0, 0x3FF]*/
	BD_U16  u16BadPixelTriggerTime;     /*RW, time limit for bad pixel trigger, in frame number ,Range: [0x0, 0x640]*/
	BD_U32  u32BadPixelTable[1024];     /*RW, Range: [0x0, 0x3FFFFF],the first 11 bits represents the X coordinate of the defect pixel, the second 11 bits represent the Y coordinate of the defect pixel*/
	
} ISP_DP_ATTR_S;

typedef struct bdISP_DIS_ATTR_S
{
    BD_BOOL bEnable;
    
} ISP_DIS_ATTR_S;
typedef struct bdISP_DIS_INFO_S
{
    BD_S8 s8Xoffset;         /*RW, Range: [0x00, 0x80]*/
    BD_S8 s8Yoffset;         /*RW, Range: [0x80, 0xFF]*/   
    
} ISP_DIS_INFO_S;


typedef struct bdISP_SHADING_ATTR_S
{
    BD_BOOL Enable;
} ISP_SHADING_ATTR_S;

typedef struct bdISP_SHADINGTAB_S
{
    BD_U16 u16ShadingCenterR_X;  /*RW, Range: [0x0, 0xFFFF]*/
    BD_U16 u16ShadingCenterR_Y;  /*RW, Range: [0x0, 0xFFFF]*/
    BD_U16 u16ShadingCenterG_X;  /*RW, Range: [0x0, 0xFFFF]*/
    BD_U16 u16ShadingCenterG_Y;  /*RW, Range: [0x0, 0xFFFF]*/
    BD_U16 u16ShadingCenterB_X;  /*RW, Range: [0x0, 0xFFFF]*/
    BD_U16 u16ShadingCenterB_Y;  /*RW, Range: [0x0, 0xFFFF]*/

	BD_U16 u16ShadingTable_R[129]; /*RW, Range: [0x0, 0xFFFF]*/
	BD_U16 u16ShadingTable_G[129]; /*RW, Range: [0x0, 0xFFFF]*/
	BD_U16 u16ShadingTable_B[129]; /*RW, Range: [0x0, 0xFFFF]*/

} ISP_SHADINGTAB_S;

typedef struct bdISP_DENOISE_ATTR_S
{
	BD_BOOL bEnable;
	BD_BOOL bManualEnable;
	BD_U8 u8ThreshTarget;	    /*RW,  Noise reduction effect for high spacial frequencies Range: [0x0, u8ThreshTarget]*/
	BD_U8 u8ThreshMax;			/*RW,  Noise reduction effect for high spacial frequencies, Range: [0x0, 0xFF] */
    BD_U8 u8SnrThresh[8];       /*RW,  Noise reduction target value array for  different iso, Range: [0x0, 0xFF],*/

} ISP_DENOISE_ATTR_S;

typedef struct bdISP_GAMMA_ATTR_S
{
	BD_BOOL bEnable;
    
} ISP_GAMMA_ATTR_S;

typedef enum bdISP_GAMMA_CURVE_E
{
	ISP_GAMMA_CURVE_1_6 = 0x0,           /* 1.6 Gamma curve */
	ISP_GAMMA_CURVE_1_8 = 0x1,           /* 1.8 Gamma curve */
	ISP_GAMMA_CURVE_2_0 = 0x2,           /* 2.0 Gamma curve */
	ISP_GAMMA_CURVE_2_2 = 0x3,           /* 2.2 Gamma curve */
	ISP_GAMMA_CURVE_DEFAULT = 0x4,       /* default Gamma curve */
	ISP_GAMMA_CURVE_SRGB = 0x5,
	ISP_GAMMA_CURVE_USER_DEFINE = 0x6,   /* user defined Gamma curve, Gamma Table must be correct */
	ISP_GAMMA_CURVE_BUTT
	
} ISP_GAMMA_CURVE_E;

typedef struct bdISP_GAMMA_TABLE_S
{
	ISP_GAMMA_CURVE_E enGammaCurve;
	BD_U16 u16Gamma[GAMMA_NODE_NUMBER];
	BD_U16 u16Gamma_FE[GAMMA_FE_LUT_SIZE];   /* only for WDR sensor mode */
   
} ISP_GAMMA_TABLE_S;

typedef struct bdISP_SHARPEN_ATTR_S
{
	BD_BOOL bEnable;
	BD_BOOL bManualEnable;
	BD_U8 u8StrengthTarget;   /*RW,  Range:[0, 0xFF]. */
	BD_U8 u8StrengthMin;      /*RW,  Range:[0, u32StrengthTarget]. */
    BD_U8 u8SharpenAltD[8]; /*RW,  Range: [0, 0xFF].  */
    BD_U8 u8SharpenAltUd[8]; /*RW, Range: [0, 0xFF]. */
} ISP_SHARPEN_ATTR_S;



typedef struct bdISP_PARA_REC_S
{
	BD_BOOL bInit;
	BD_BOOL bTmCfg;
	BD_BOOL bAttrCfg;
	
    ISP_INPUT_TIMING_S stInputTiming;
    ISP_IMAGE_ATTR_S stImageAttr;

	BD_U32 u32ModFlag;

	/* Exposure */
	ISP_OP_TYPE_E enExpType;
	ISP_AE_ATTR_S stAEAttr;
	ISP_ME_ATTR_S stMEAttr;

	/* White Balance */
	ISP_OP_TYPE_E enWBType;
	ISP_AWB_ATTR_S stAWBAttr;
	ISP_MWB_ATTR_S stMWBAttr;
    
} ISP_PARA_REC_S;

/*Crosstalk Removal*/
typedef struct bdISP_CR_ATTR_S
{
    BD_BOOL  bEnable;
    BD_U8    u8Strength;  /*Range: [0x0, 0xFF],this register is  not recommended  to change */
    BD_U8    u8Sensitivity; /*Range: [0x0, 0xFF],this register is  not recommended  to change */
    BD_U16   u16Threshold;  /*Range: [0x0, 0xFFFF],this register is  not recommended  to change */
    BD_U16   u16Slope; /*Range: [0x0, 0xFFFF],this register is  not recommended  to change */
}ISP_CR_ATTR_S;

typedef struct bdISP_ANTIFOG_S
{
	BD_BOOL bEnable;
	// TODO:
} ISP_ANTIFOG_S;

typedef struct bdISP_ANTI_FALSECOLOR_S
{
	BD_U8  u8Strength;       /*Range: [0x0, 0x93]*/
	// TODO:
} ISP_ANTI_FALSECOLOR_S;

/*users query ISP state information*/
typedef struct bdISP_INNER_STATE_INFO_S
{
	BD_U32 u32ExposureTime;  /*RO,  Range: [0x0, 0xFFFFFFFF] */				
	BD_U32 u32AnalogGain;	/*RO,Range: [0x0, 0xFFFF] */				
	BD_U32 u32DigitalGain;	/*RO,Range: [0x0, 0xFFFF] */			
	BD_U32 u32Exposure;			/*RO,Range: [0x0, 0xFFFF] */		
	BD_U16 u16AE_Hist256Value[256];		/*RO, 256 bins histogram  */
	BD_U16 u16AE_Hist5Value[5];			/*RO, 5 bins histogram   */
	BD_U8 u8AveLum;					    /*RO, Range: [0x0, 0xFF]*/	
	BD_BOOL bExposureIsMAX;
}ISP_INNER_STATE_INFO_S;

/*ISP debug information*/
typedef struct bdISP_DEBUG_INFO_S
{
    BD_BOOL bAEDebugEnable;     /*RW, 1:enable AE debug, 0:disable AE debug*/
    BD_U32 u32AEAddr;           /*RW, phy address of AE debug*/
    BD_U32 u32AESize;           /*RO, */
    
    BD_BOOL bAWBDebugEnable;
    BD_U32 u32AWBAddr;
    BD_U32 u32AWBSize;

    BD_BOOL bSysDebugEnable;
    BD_U32 u32SysAddr;
    BD_U32 u32SysSize;

    BD_U32 u32DebugDepth;
}ISP_DEBUG_INFO_S;
#endif

#define ISP_CHECK_POINTER(ptr)\
    do {\
        if (NULL == ptr)\
        {\
        	BD_PRINT("Null Pointer!\n");\
            return BD_ERR_ISP_NULL_PTR;\
        }\
    }while(0)


#define ISP_EVENT_DETECT_MASK 		unsigned int
#define	ISP_EVENT_DETECT_NONE 		0x00000000
#define	ISP_EVENT_DETECT_MOTION 	0x00000001
#define	ISP_EVENT_DETECT_BLIND 		0x00000010
#define	ISP_EVENT_DETECT_NIGHT 		0x00000100
#define	ISP_EVENT_DETECT_DAY 		0x00001000
#define	ISP_EVENT_DETECT_DEFOCUS 	0x00010000
#define	ISP_EVENT_DETECT_DEHAZE 	0x00100000

/* MANR definition */

typedef struct bdISP_MANR_ATTR_S {
	
	BD_BOOL bBypass;
	BD_BOOL bEnable;
	BD_U32 u32SFilter;
	BD_U32 u32SGain0;
	BD_U32 u32SGain1;
	BD_U32 u32TFilter;
	BD_U32 u32TGain;
	BD_U32 u32KFactor;

	BD_U16 u16NVAR_B;
	BD_U16 u16NVAR_A;
	BD_U32 u32Threshold;
	BD_U32 u32Width;
	BD_U32 u32Height;

} ISP_MANR_ATTR_S;

typedef struct bdISP_MANR_FILTER_S {
	BD_BOOL bTFilterEnable;
	BD_BOOL bSFilterEnable;
} ISP_MANR_FILTER_S;

/* Defocus definition */

typedef struct bdISP_DEFOCUS_ATTR_S {
	BD_BOOL bEnable;
	
	BD_U32 u32Level;
	BD_U32 u32Spartial;
	BD_U32 u32Temporal;

	RECT_S	stRect;
} ISP_DEFOCUS_ATTR_S;

typedef struct bdISP_DEFOCUS_STATE_S {
	BD_BOOL	bFocused;
} ISP_DEFOCUS_STATE_S;



/* Dehaze definition */

typedef enum bdISP_DEHAZE_RESOLUTION_E
{
	ISP_DEHAZE_RESOLUTION_720P = 0x0,           
	//ISP_DEHAZE_RESOLUTION_1080I = 0x2,   /* sensor bayer does not support interlaced */ 	
	ISP_DEHAZE_RESOLUTION_1080P = 0x3,    
	ISP_DEHAZE_RESOLUTION_BUTT,           
} ISP_DEHAZE_RESOLUTION_E;

typedef enum bdISP_DEHAZE_FILTER_E
{
	ISP_DEHAZE_FILTER_PLUS = 0x0,
	ISP_DEHAZE_FILTER_X,
	ISP_DEHAZE_FILTER_3X3,
	ISP_DEHAZE_FILTER_3X3WEIGHT,
	ISP_DEHAZE_FILTER_BUTT,
} ISP_DEHAZE_FILTER_E;

typedef enum bdISP_DEHAZE_OUTRANGE_E
{
	ISP_DEHAZE_OUTRANGE_1_254 = 0x0,
	ISP_DEHAZE_OUTRANGE_16_240,
	ISP_DEHAZE_OUTRANGE_BUTT,
} ISP_DEHAZE_OUTRANGE_E;

typedef struct bdISP_DEHAZE_ATTR_S {
	BD_BOOL bEnable;
	
	/* Set Input Resolution */
	ISP_DEHAZE_RESOLUTION_E	enInputResolution;		// 0/1 : 720p, 2:1080i, 3:1080p

	ISP_DEHAZE_FILTER_E enFilterType;	// + Type, X Type, 3x3 Type, 3x3 Weighted Type

	/* DeHaze Region Window */	
	BD_U16 u16StartX;
	BD_U16 u16EndX;
	BD_U16 u16StartY;
	BD_U16 u16EndY;

	BD_U8	u8HazeTemporalSensitivity;
	BD_BOOL	bHazeDetectAllWindow;

	BD_BOOL	bGainDetectAllWindow;
	BD_U8 	u8GainThreshold;
	BD_U8 	u8GainMininum;
	BD_U8 	u8DeviationThreshold;
	BD_U8 	u8DeviationMinimum;
	BD_U8	u8GainTemporalSensitivity;

	BD_U8	u8AutoGainWeight;
	BD_BOOL	bAutoGainControl;
	BD_U16	u16ManualGainLevel;

	BD_BOOL	bDehazeAllWindow;

	BD_BOOL bBWEEnable;	
	BD_BOOL	bYPeak;

	ISP_DEHAZE_OUTRANGE_E enOutRange;	
	BD_BOOL	bYCInvert;

	BD_BOOL	bUseBlank;

} ISP_DEHAZE_ATTR_S;

typedef struct bdISP_DEHAZE_DETECT_STATE_S {
	BD_U32 u32GainValue;
	BD_U32 u32DehazeAverage;	/* means brightness */
	BD_U32 u32DeviationAverage; /* Difference */
	BD_U32 u32DeviationCoef;
} ISP_DEHAZE_DETECT_STATE_S;


/* Motion / Blind / Night / Day Detection */

typedef struct bdISP_MOTION_DETECT_ATTR_S{
	BD_BOOL	bEnable;
	BD_U16	u16TemporalSensitivity;
	BD_U16	u16SpatialSensitivity;
	BD_U16	u16LevelSensitivity;
	BD_U8	u8RefUpdatePeriod;		// frame unit.
} ISP_MOTION_DETECT_ATTR_S;

typedef struct bdISP_BLIND_DETECT_ATTR_S{
	BD_BOOL	bEnable;
	BD_U16	u16TemporalSensitivity;
	BD_U16	u16SpatialSensitivity;
	BD_U16	u16LevelSensitivity;
	BD_U8	u8RefUpdatePeriod;		// frame unit.
} ISP_BLIND_DETECT_ATTR_S;

typedef struct bdISP_NIGHT_DETECT_ATTR_S{
	BD_BOOL	bEnable;
	BD_U16	u16TemporalSensitivity;
	BD_U16	u16LevelSensitivity;
	BD_U8	u8RefUpdatePeriod;		// frame unit.
} ISP_NIGHT_DETECT_ATTR_S;

typedef struct bdISP_DAY_DETECT_ATTR_S{
	BD_BOOL	bEnable;
	BD_U16	u16TemporalSensitivity;
	BD_U16	u16LevelSensitivity;
	BD_U8	u8RefUpdatePeriod;		// frame unit.
} ISP_DAY_DETECT_ATTR_S;

typedef struct bdISP_BLIND_DETECT_STATE_S {
	BD_BOOL bBlinded;
} ISP_BLIND_DETECT_STATE_S;

typedef struct bdISP_NIGHT_DETECT_STATE_S {
	BD_BOOL bNightScene;
} ISP_NIGHT_DETECT_STATE_S;

typedef struct bdISP_DAY_DETECT_STATE_S {
	BD_BOOL bDayScene;
} ISP_DAY_DETECT_STATE_S;

typedef struct bdISP_MOTION_DETECT_MASK_S {
	BD_BOOL bClear;				// 0: set, 1: clear
	BD_U32 u32MaskBit[24];
} ISP_MOTION_DETECT_MASK_S;

typedef struct bdISP_BLIND_DETECT_MASK_S {
	BD_BOOL bClear;				// 0: set, 1: clear
	BD_U32 u32MaskBit[24];
} ISP_BLIND_DETECT_MASK_S;

typedef struct bdISP_MOTION_DETECT_DATA_S {
	BD_U32 u32DetectBit[48][2];	// [i][j]:  i: vertical (total 48line), j[0]:msb, j[1]:lsb (total 64bit)
} ISP_MOTION_DETECT_DATA_S;

#ifdef __cplusplus
#if __cplusplus
}
#endif
#endif /* End of #ifdef __cplusplus */

#endif /* __BD_COMM_ISP_H__ */

